#include <gtest/gtest.h>
#include <list>
#include <integer/integer.hpp>

///////// ADD OPERATOR /////////

TEST(Add_operator, known_cases) {
  /* Test operation is run correctly for know results.
  */
  std::list<Integer> first_op = {0_I, 0_I, 0_I, -1_I, 46213545464579013576145_I,
                                  46213545464579013576145_I, -46213545464579013576145_I,
                                  13654879431548612365867891321145646878646231_I,
                                  13654879431548612365867891321145646878646231_I,
                                  25793146973597103687036874279130654667978920_I,
                                  -25793146973597103687036874279130654667978920_I,
                                };
  std::list<Integer> second_op = {0_I, 1_I, -1_I, 1_I, 175_I, -175_I, 175_I,
                                  4294967296_I, -4294967296_I,
                                  18446744073709551615_I, 18446744073709551615_I};
  std::list<Integer> result = {0_I, 1_I, -1_I, 0_I, 46213545464579013576320_I,
                                  46213545464579013575970_I,
                                  -46213545464579013575970_I,
                                13654879431548612365867891321145651173613527_I,
                              13654879431548612365867891321145642583678935_I,
                              25793146973597103687036892725874728377530535_I,
                              -25793146973597103687036855832386580958427305_I};
  /* Check every result value is obtained by adding the corresponding first
    operand and second operand.*/
  std::list<Integer>::iterator ft, st, rt;
  ft = first_op.begin();
  st = second_op.begin();
  rt = result.begin();

  for (; ft != first_op.end(); ft++, st++, rt++) {
    EXPECT_EQ(*ft + *st, *rt);
  }

}

TEST(Add_operator, sum_zero_value) {
  /*
   * Test any random value added to its opposite value must add 0
  */
  std::default_random_engine int_gen(436);
  Integer::set_random_engine(int_gen);
  Integer ti;

  for (size_t i = 0; i < 10000; i++) {
    ti.set_random_value();
    EXPECT_EQ(ti + (-ti), 0) << "Positive value: " << ti << ", negative value: " << -ti << std::endl;
    EXPECT_EQ(ti - ti, 0) << "Positive value: " << ti << ", negative value: " << -ti << std::endl;
  }
}

TEST(Add_operator, long_long_int_right_operand) {
  /*
  * Test add operator when right operand is long long int
  */
  EXPECT_EQ(0_I + 0, 0_I);
  EXPECT_EQ(-0_I + 0, 0_I);

  EXPECT_EQ(0_I + 1, 1_I);
  EXPECT_EQ(-0_I + 1, 1_I);

  EXPECT_EQ(2046473648_I + 45, 2046473693_I);
  EXPECT_EQ(-2046473648_I + 45, -2046473603_I);

  EXPECT_EQ(2046473648_I + 2147483648, 4193957296_I);
  EXPECT_EQ(-2046473648_I + 2147483648, 101010000_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I + 99999999,
    1461501637330902918203684822716283019656032542976_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I + 99999999,
      -1461501637330902918203684822716283019655832542978_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I + 2147483648,
    1461501637330902918203684822716283019658080026625_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I + 2147483648,
      -1461501637330902918203684822716283019653785059329_I);
}

TEST(Add_operator, long_long_int_left_operand) {
  /*
  * Test add operator when left operand is long long int
  */
  EXPECT_EQ(0 + 0_I, 0_I);
  EXPECT_EQ(-0 + 0_I, 0_I);

  EXPECT_EQ(1 + 0_I, 1_I);
  EXPECT_EQ(-1 + 0_I, -1_I);

  EXPECT_EQ(45 + 2046473648_I, 2046473693_I);
  EXPECT_EQ(-45 + 2046473648_I, 2046473603_I);

  EXPECT_EQ(2147483648 + 2046473648_I, 4193957296_I);
  EXPECT_EQ(-2147483648 + 2046473648_I, -101010000_I);

  EXPECT_EQ(99999999 + 1461501637330902918203684822716283019655932542977_I,
    1461501637330902918203684822716283019656032542976_I);
  EXPECT_EQ(-99999999 + 1461501637330902918203684822716283019655932542977_I,
      1461501637330902918203684822716283019655832542978_I);

  EXPECT_EQ(2147483648 + 1461501637330902918203684822716283019655932542977_I,
    1461501637330902918203684822716283019658080026625_I);
  EXPECT_EQ(-2147483648 + 1461501637330902918203684822716283019655932542977_I,
      1461501637330902918203684822716283019653785059329_I);
}

TEST(Add_operator, string_right_operand) {
  /*
  * Test add operator when right operand is long long int
  */
  EXPECT_EQ(0_I + "0", 0_I);
  EXPECT_EQ(-0_I + "0", 0_I);

  EXPECT_EQ(0_I + "1", 1_I);
  EXPECT_EQ(-0_I + "1", 1_I);

  EXPECT_EQ(2046473648_I + "45", 2046473693_I);
  EXPECT_EQ(-2046473648_I + "45", -2046473603_I);

  EXPECT_EQ(2046473648_I + "2147483648", 4193957296_I);
  EXPECT_EQ(-2046473648_I + "2147483648", 101010000_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I + "99999999",
    1461501637330902918203684822716283019656032542976_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I + "99999999",
      -1461501637330902918203684822716283019655832542978_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I + "2147483648",
    1461501637330902918203684822716283019658080026625_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I + "2147483648",
      -1461501637330902918203684822716283019653785059329_I);
}

TEST(Add_operator, string_left_operand) {
  /*
  * Test add operator when left operand is long long int
  */
  EXPECT_EQ("0" + 0_I, 0_I);
  EXPECT_EQ("-0" + 0_I, 0_I);

  EXPECT_EQ("1" + 0_I, 1_I);
  EXPECT_EQ("-1" + 0_I, -1_I);

  EXPECT_EQ("45" + 2046473648_I, 2046473693_I);
  EXPECT_EQ("-45" + 2046473648_I, 2046473603_I);

  EXPECT_EQ("2147483648" + 2046473648_I, 4193957296_I);
  EXPECT_EQ("-2147483648" + 2046473648_I, -101010000_I);

  EXPECT_EQ("99999999" + 1461501637330902918203684822716283019655932542977_I,
    1461501637330902918203684822716283019656032542976_I);
  EXPECT_EQ("-99999999" + 1461501637330902918203684822716283019655932542977_I,
      1461501637330902918203684822716283019655832542978_I);

  EXPECT_EQ("2147483648" + 1461501637330902918203684822716283019655932542977_I,
    1461501637330902918203684822716283019658080026625_I);
  EXPECT_EQ("-2147483648" + 1461501637330902918203684822716283019655932542977_I,
      1461501637330902918203684822716283019653785059329_I);
}

TEST(Add_assign_operator, cumulative_sum) {
  /*Test add all the values from 1 to 1.000.000.000.000.000.000.000.000.000.000
   * must add 500000000000000000000000000000500000000000000000000000000000
  */
  Integer cum;
  const Integer inc(100000000_I);
  const Integer limit (1000000_I * inc);

  for (Integer i = 0; i <= limit; i += inc)
    cum += i;

  EXPECT_EQ(cum, 500000500000_I * inc);
}

TEST(Add_assign_operator, long_long_int_right_operand) {
  /*
   * Test increase operator having long long int type at right operand
   */
   Integer n;
   EXPECT_EQ(n += 0, 0_I);
   EXPECT_EQ(n, 0_I);

   EXPECT_EQ(n += 4294967295, 4294967295_I);
   EXPECT_EQ(n, 4294967295_I);

   n = 987136488941136_I;
   EXPECT_EQ(n += 789135_I, 987136489730271_I);
   EXPECT_EQ(n, 987136489730271_I);

   n = -987136488941136_I;
   EXPECT_EQ(n += 789135_I, -987136488152001_I);
   EXPECT_EQ(n, -987136488152001_I);

   n = 1006974134684871397784611364848794113446878413546487416146_I;
   EXPECT_EQ(n += 999999,
                1006974134684871397784611364848794113446878413546488416145_I);
   EXPECT_EQ(n, 1006974134684871397784611364848794113446878413546488416145_I);

   n = -1006974134684871397784611364848794113446878413546487416146_I;
   EXPECT_EQ(n += 999999,
                -1006974134684871397784611364848794113446878413546486416147_I);
   EXPECT_EQ(n, -1006974134684871397784611364848794113446878413546486416147_I);
}

TEST(Add_assign_operator, string_right_operand) {
  /*
   * Test increase operator having string type at right operand
   */
   Integer n;
   EXPECT_EQ(n += "0", 0_I);
   EXPECT_EQ(n, 0_I);

   n = 987136488941136_I;
   EXPECT_EQ(n += "78913516461356648746", 78914503597845589882_I);
   EXPECT_EQ(n, 78914503597845589882_I);

   n = -987136488941136_I;
   EXPECT_EQ(n += "78913516461356648746", 78912529324867707610_I);
   EXPECT_EQ(n, 78912529324867707610_I);

   n = 6111346874110099777741136411114454448877899133113_I;
   EXPECT_EQ(n += "4741367413677416974364487116448741354446460",
              6111351615477513455158110775601570897619253579573_I);
   EXPECT_EQ(n, 6111351615477513455158110775601570897619253579573_I);

   n = -6111346874110099777741136411114454448877899133113_I;
   EXPECT_EQ(n += "4741367413677416974364487116448741354446460",
              -6111342132742686100324162046627338000136544686653_I);
   EXPECT_EQ(n, -6111342132742686100324162046627338000136544686653_I);
}

TEST(Increment_operator, increment_test) {
  /*Test prefix and postfix increment operator
  */
  const Integer inc(100000000_I);
  const Integer limit (1000000_I * inc);

  for (Integer i = 0; i < limit; i += inc) {
    Integer pre_inc(i), post_inc(i);

    EXPECT_EQ((i + 1) == ++pre_inc, true) << "i+1 value: " << i << ", pre_inc: " << pre_inc << std::endl;
    EXPECT_EQ(i, post_inc++) << "i value: " << i << ", post_inc: " << post_inc << std::endl;
    EXPECT_EQ((i + 1), post_inc) << "i+1 value: " << i << ", post_inc: " << post_inc << std::endl;
  }
}

///////// DEDUCT OPERATOR /////////

TEST(Deduct_operator, known_cases) {
  /* Test operation is run correctly for know results.
  */
  std::list<Integer> first_op = {0_I, 0_I, 0_I, -1_I, 46213545464579013576145_I,
                                  46213545464579013576145_I, -175_I,
                                  13654879431548612365867891321145646878646231_I,
                                  13654879431548612365867891321145646878646231_I,
                                  25793146973597103687036874279130654667978920_I,
                                  -25793146973597103687036874279130654667978920_I
                                };
  std::list<Integer> second_op = {0_I, 1_I, -1_I, 1_I, 175_I, -175_I,
                                  46213545464579013576145_I,
                                  4294967296_I, -4294967296_I,
                                  18446744073709551615_I, 18446744073709551615_I};
  std::list<Integer> result = {0_I, -1_I, 1_I, -2_I, 46213545464579013575970_I,
                                  46213545464579013576320_I,
                                  -46213545464579013576320_I,
                                  13654879431548612365867891321145642583678935_I,
                                13654879431548612365867891321145651173613527_I,
                              25793146973597103687036855832386580958427305_I, //Revisar por qué si falta la coma, se fusiona con el siguiente número
                              -25793146973597103687036892725874728377530535_I};
  /* Check every result value is obtained by adding the corresponding first
    operand and second operand.*/
  std::list<Integer>::iterator ft, st, rt;
  ft = first_op.begin();
  st = second_op.begin();
  rt = result.begin();

  for (; ft != first_op.end(); ft++, st++, rt++) {
    EXPECT_EQ(*ft - *st, *rt);
  }

}

TEST(Deduct_operator, long_long_int_right_operand) {
  /*
  * Test deduct operator when right operand is long long int
  */
  EXPECT_EQ(0_I - 0, 0_I);
  EXPECT_EQ(-0_I - 0, 0_I);

  EXPECT_EQ(0_I - 1, -1_I);
  EXPECT_EQ(-0_I - 1, -1_I);

  EXPECT_EQ(2046473648_I - 45, 2046473603_I);
  EXPECT_EQ(-2046473648_I - 45, -2046473693_I);

  EXPECT_EQ(2046473648_I - 2147483648, -101010000_I);
  EXPECT_EQ(-2046473648_I - 2147483648, -4193957296_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I - 99999999,
    1461501637330902918203684822716283019655832542978_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I - 99999999,
      -1461501637330902918203684822716283019656032542976_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I - 2147483648,
    1461501637330902918203684822716283019653785059329_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I - 2147483648,
      -1461501637330902918203684822716283019658080026625_I);
}

TEST(Deduct_operator, long_long_int_left_operand) {
  /*
  * Test deduct operator when left operand is long long int
  */
  EXPECT_EQ(0 - 0_I, 0_I);
  EXPECT_EQ(-0 - 0_I, 0_I);

  EXPECT_EQ(1 - 0_I, 1_I);
  EXPECT_EQ(-1 - 0_I, -1_I);

  EXPECT_EQ(45 - 2046473648_I, -2046473603_I);
  EXPECT_EQ(-45 - 2046473648_I, -2046473693_I);

  EXPECT_EQ(2147483648 - 2046473648_I, 101010000_I);
  EXPECT_EQ(-2147483648 - 2046473648_I, -4193957296_I);

  EXPECT_EQ(99999999 - 1461501637330902918203684822716283019655932542977_I,
    -1461501637330902918203684822716283019655832542978_I);
  EXPECT_EQ(-99999999 - 1461501637330902918203684822716283019655932542977_I,
      -1461501637330902918203684822716283019656032542976_I);

  EXPECT_EQ(2147483648 - 1461501637330902918203684822716283019655932542977_I,
    -1461501637330902918203684822716283019653785059329_I);
  EXPECT_EQ(-2147483648 - 1461501637330902918203684822716283019655932542977_I,
      -1461501637330902918203684822716283019658080026625_I);
}

TEST(Deduct_operator, string_right_operand) {
  /*
  * Test deduct operator when right operand is long long int
  */
  EXPECT_EQ(0_I - "0", 0_I);
  EXPECT_EQ(-0_I - "0", 0_I);

  EXPECT_EQ(0_I - "1", -1_I);
  EXPECT_EQ(-0_I - "1", -1_I);

  EXPECT_EQ(2046473648_I - "45", 2046473603_I);
  EXPECT_EQ(-2046473648_I -"45", -2046473693_I);

  EXPECT_EQ(2046473648_I - "2147483648", -101010000_I);
  EXPECT_EQ(-2046473648_I - "2147483648", -4193957296_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I - "99999999",
    1461501637330902918203684822716283019655832542978_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I - "99999999",
      -1461501637330902918203684822716283019656032542976_I);

  EXPECT_EQ(1461501637330902918203684822716283019655932542977_I - "2147483648",
    1461501637330902918203684822716283019653785059329_I);
  EXPECT_EQ(-1461501637330902918203684822716283019655932542977_I - "2147483648",
      -1461501637330902918203684822716283019658080026625_I);
}

TEST(Deduct_operator, string_left_operand) {
  /*
  * Test deduct operator when left operand is long long int
  */
  EXPECT_EQ("0" - 0_I, 0_I);
  EXPECT_EQ("-0" - 0_I, 0_I);

  EXPECT_EQ("0" - 1_I, -1_I);
  EXPECT_EQ("-0" - 1_I, -1_I);

  EXPECT_EQ("2046473648" - 45_I, 2046473603_I);
  EXPECT_EQ("-2046473648" - 45_I, -2046473693_I);

  EXPECT_EQ("2046473648" - 2147483648_I, -101010000_I);
  EXPECT_EQ("-2046473648" - 2147483648_I, -4193957296_I);

  EXPECT_EQ("1461501637330902918203684822716283019655932542977" - 99999999_I,
    1461501637330902918203684822716283019655832542978_I);
  EXPECT_EQ("-1461501637330902918203684822716283019655932542977" - 99999999_I,
      -1461501637330902918203684822716283019656032542976_I);

  EXPECT_EQ("1461501637330902918203684822716283019655932542977" - 2147483648_I,
    1461501637330902918203684822716283019653785059329_I);
  EXPECT_EQ("-1461501637330902918203684822716283019655932542977" - 2147483648_I,
      -1461501637330902918203684822716283019658080026625_I);
}

TEST(Deduct_assign_operator, cumulative_deduction) {
  /*Test adding all the values from -1 to -1.000.000.000.000.000.000.000.000.000.000
   * must add -500000000000000000000000000000500000000000000000000000000000
  */
  Integer cum;
  const Integer dec(100000000_I);
  const Integer limit (-1000000_I * dec);

  for (Integer i = 0; i >= limit; i -= dec)
    cum -= i;

  EXPECT_EQ(cum, 500000500000_I * dec);
}

TEST(Decrement_operator, decrement_test) {
  /*Test prefix and postfix increment operator
  */
  const Integer dec(100000000_I);
  const Integer limit (-1000000_I * dec);

  for (Integer i = 0; i >= limit; i -= dec) {
    Integer pre_inc(i), post_inc(i);

    EXPECT_EQ((i - 1) == --pre_inc, true) << "i-1 value: " << i << ", pre_dec: " << pre_inc << std::endl;
    EXPECT_EQ(i, post_inc--) << "i value: " << i << ", post_dec: " << post_inc << std::endl;
    EXPECT_EQ((i - 1), post_inc) << "i-1 value: " << i << ", post_dec: " << post_inc << std::endl;
  }
}

TEST(Deduct_assign_operator, long_long_int_right_operand) {
  /*
   * Test decrease operator having long long int type at right operand
   */
   Integer n;
   EXPECT_EQ(n -= 0, 0_I);
   EXPECT_EQ(n, 0_I);

   EXPECT_EQ(n -= 4294967295, -4294967295_I);
   EXPECT_EQ(n, -4294967295_I);

   n = 987136488941136_I;
   EXPECT_EQ(n -= 789135_I, 987136488152001_I);
   EXPECT_EQ(n, 987136488152001_I);

   n = -987136488941136_I;
   EXPECT_EQ(n -= 789135_I, -987136489730271_I);
   EXPECT_EQ(n, -987136489730271_I);

   n = 1006974134684871397784611364848794113446878413546487416146_I;
   EXPECT_EQ(n -= 999999,
                1006974134684871397784611364848794113446878413546486416147_I);
   EXPECT_EQ(n, 1006974134684871397784611364848794113446878413546486416147_I);

   n = -1006974134684871397784611364848794113446878413546487416146_I;
   EXPECT_EQ(n -= 999999,
                -1006974134684871397784611364848794113446878413546488416145_I);
   EXPECT_EQ(n, -1006974134684871397784611364848794113446878413546488416145_I);
}

TEST(Deduct_assign_operator, string_right_operand) {
  /*
   * Test decrease operator having string type at right operand
   */
   Integer n;
   EXPECT_EQ(n -= "0", 0_I);
   EXPECT_EQ(n, 0_I);

   n = 987136488941136_I;
   EXPECT_EQ(n -= "78913516461356648746", -78912529324867707610_I);
   EXPECT_EQ(n, -78912529324867707610_I);

   n = -987136488941136_I;
   EXPECT_EQ(n -= "78913516461356648746", -78914503597845589882_I);
   EXPECT_EQ(n, -78914503597845589882_I);

   n = 6111346874110099777741136411114454448877899133113_I;
   EXPECT_EQ(n -= "4741367413677416974364487116448741354446460",
              6111342132742686100324162046627338000136544686653_I);
   EXPECT_EQ(n, 6111342132742686100324162046627338000136544686653_I);

   n = -6111346874110099777741136411114454448877899133113_I;
   EXPECT_EQ(n -= "4741367413677416974364487116448741354446460",
              -6111351615477513455158110775601570897619253579573_I);
   EXPECT_EQ(n, -6111351615477513455158110775601570897619253579573_I);
}

///////// MULTIPLICATION OPERATOR /////////

TEST(Multiply_operator, special_cases) {
  EXPECT_EQ(0_I * 0_I, 0_I);
  EXPECT_EQ(0_I * 1_I, 0_I);
  EXPECT_EQ(1_I * 1_I, 1_I);
}

TEST(Multiply_operator, zero_multiplication) {
  /*
   * Test any random number multiplied by zero must return zero
   */
   std::default_random_engine int_gen(3967);
   Integer::set_random_engine(int_gen);
   Integer random;

   for (size_t i = 0; i < 5000; i++) {
     random.set_random_value();
     EXPECT_EQ(random * 0_I, 0);
     EXPECT_EQ((-random) * 0_I, 0);
     EXPECT_EQ(0_I * random, 0_I);
     EXPECT_EQ(0_I * (-random), 0_I);
   }
}

TEST(Multiply_operator, one_multiplication) {
  /*
   * Test any random number multiplied by zero must return zero
   */
   std::default_random_engine int_gen(5610);
   Integer::set_random_engine(int_gen);
   Integer random;

   for (size_t i = 0; i < 5000; i++) {
     random.set_random_value();
     EXPECT_EQ(random * 1_I, random);
     EXPECT_EQ((-random) * 1_I, -random);
     EXPECT_EQ(random * -1_I, -random);
     EXPECT_EQ((-random) * -1_I, random);

     EXPECT_EQ(1_I * random, random);
     EXPECT_EQ(1_I * (-random), -random);
     EXPECT_EQ(-1_I * random, -random);
     EXPECT_EQ(-1_I * (-random), random);
   }
}

TEST(Multiply_operator, known_cases) {
  /*
   * Test multiply operation for several know cases
   */

   EXPECT_EQ(50_I * 2000000_I, 100000000_I);
   EXPECT_EQ(50_I * -2000000_I, -100000000_I);
   EXPECT_EQ(79228162514264337593543950335_I * 2147483647_I, 170141183381241069217422966120192671745_I);
   EXPECT_EQ(-79228162514264337593543950335_I * 2147483647_I, -170141183381241069217422966120192671745_I);
   EXPECT_EQ(340282366920938463463374607431768211456_I * 9903520314283042199192993642_I,
                3369993333393829974333376834835098796063873533311380445372719562752_I);
   EXPECT_EQ(340282366920938463463374607431768211456_I * -9903520314283042199192993642_I,
                 -3369993333393829974333376834835098796063873533311380445372719562752_I);
}


TEST(Multiply_operator, factorial) {
  /*
   * Test multiply operator for factorial computation
   */

   std::list<Integer> base = {30_I, 40_I, 100_I, 400_I};
   std::list<Integer> result = {265252859812191058636308480000000_I,
                                815915283247897734345611269596115894272000000000_I,
                                93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000_I,
                                64034522846623895262347970319503005850702583026002959458684445942802397169186831436278478647463264676294350575035856810848298162883517435228961988646802997937341654150838162426461942352307046244325015114448670890662773914918117331955996440709549671345290477020322434911210797593280795101545372667251627877890009349763765710326350331533965349868386831339352024373788157786791506311858702618270169819740062983025308591298346162272304558339520759611505302236086810433297255194852674432232438669948422404232599805551610635942376961399231917134063858996537970147827206606320217379472010321356624613809077942304597360699567595836096158715129913822286578579549361617654480453222007825818400848436415591229454275384803558374518022675900061399560145595206127211192918105032491008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000_I
                              };

   // Repeat test per each factorial
   std::list<Integer>::iterator bt, rt;
   bt = base.begin();
   rt = result.begin();

   for(; bt != base.end(); bt++, rt++) {
     Integer fact(1);

     for (Integer i = 1_I; i <= *bt; i++) {
       fact *= i;
     }

     EXPECT_EQ(fact, *rt);
   }

}

TEST(Multiply_operator, long_long_int_right_operand) {
  /*
   * Multiply operator with long long int type at right operand
   */
   EXPECT_EQ(0_I * 0, 0_I);
   EXPECT_EQ(0_I * -0, 0_I);
   EXPECT_EQ(-0_I * 0, 0_I);
   EXPECT_EQ(-0_I * -0, 0_I);

   EXPECT_EQ(483486_I * 23, 11120178_I);
   EXPECT_EQ(483486_I * -23, -11120178_I);
   EXPECT_EQ(-483486_I * 23, -11120178_I);
   EXPECT_EQ(-483486_I * -23, 11120178_I);

   EXPECT_EQ(9999999_I * 10000000, 99999990000000_I);
   EXPECT_EQ(9999999_I * -10000000, -99999990000000_I);
   EXPECT_EQ(-9999999_I * 10000000, -99999990000000_I);
   EXPECT_EQ(-9999999_I * -10000000, 99999990000000_I);

   EXPECT_EQ(4611686018427387904_I * 123456, 569340309090971601076224_I);
   EXPECT_EQ(4611686018427387904_I * -123456, -569340309090971601076224_I);
   EXPECT_EQ(-4611686018427387904_I * 123456, -569340309090971601076224_I);
   EXPECT_EQ(-4611686018427387904_I * -123456, 569340309090971601076224_I);
}

TEST(Multiply_operator, string_right_operand) {
  /*
   * Multiply operator with long long int type at right operand
   */
   EXPECT_EQ(0_I * "0", 0_I);
   EXPECT_EQ(0_I * "-0", 0_I);
   EXPECT_EQ(-0_I * "0", 0_I);
   EXPECT_EQ(-0_I * "-0", 0_I);

   EXPECT_EQ(483486_I * "23", 11120178_I);
   EXPECT_EQ(483486_I * "-23", -11120178_I);
   EXPECT_EQ(-483486_I * "23", -11120178_I);
   EXPECT_EQ(-483486_I * "-23", 11120178_I);

   EXPECT_EQ(2147483647_I * "1000000000000000", 2147483647000000000000000_I);
   EXPECT_EQ(2147483647_I * "-1000000000000000", -2147483647000000000000000_I);
   EXPECT_EQ(-2147483647_I * "1000000000000000", -2147483647000000000000000_I);
   EXPECT_EQ(-2147483647_I * "-1000000000000000", 2147483647000000000000000_I);

   EXPECT_EQ(45671926166590716193865151022383844364247891967_I * "9999999999999999",
            456719261665907116266725343633122249777327897286155635752108033_I);
   EXPECT_EQ(45671926166590716193865151022383844364247891967_I * "-9999999999999999",
               -456719261665907116266725343633122249777327897286155635752108033_I);
   EXPECT_EQ(-45671926166590716193865151022383844364247891967_I * "9999999999999999",
              -456719261665907116266725343633122249777327897286155635752108033_I);
   EXPECT_EQ(-45671926166590716193865151022383844364247891967_I * "-9999999999999999",
               456719261665907116266725343633122249777327897286155635752108033_I);
}

TEST(Multiply_operator, long_long_int_left_operand) {
  /*
   * Multiply operator with long long int type at left operand
   */
   EXPECT_EQ(0 * 0_I, 0_I);
   EXPECT_EQ(-0 * 0_I, 0_I);
   EXPECT_EQ(0 * -0_I, 0_I);
   EXPECT_EQ(-0 * -0_I, 0_I);

   EXPECT_EQ(23 * 483486_I, 11120178_I);
   EXPECT_EQ(-23 * 483486_I, -11120178_I);
   EXPECT_EQ(23 * -483486_I, -11120178_I);
   EXPECT_EQ(-23 * -483486_I, 11120178_I);

   EXPECT_EQ(10000000 * 9999999_I, 99999990000000_I);
   EXPECT_EQ(-10000000 * 9999999_I, -99999990000000_I);
   EXPECT_EQ(10000000 * -9999999_I, -99999990000000_I);
   EXPECT_EQ(-10000000 * -9999999_I, 99999990000000_I);

   EXPECT_EQ(123456 * 4611686018427387904_I, 569340309090971601076224_I);
   EXPECT_EQ(-123456 * 4611686018427387904_I, -569340309090971601076224_I);
   EXPECT_EQ(123456 * -4611686018427387904_I, -569340309090971601076224_I);
   EXPECT_EQ(-123456 * -4611686018427387904_I, 569340309090971601076224_I);
}

TEST(Multiply_operator, string_left_operand) {
  /*
   * Multiply operator with long long int type at left operand
   */
   EXPECT_EQ("0" * 0_I, 0_I);
   EXPECT_EQ("-0" * 0_I, 0_I);
   EXPECT_EQ("0" * -0_I, 0_I);
   EXPECT_EQ("-0" * -0_I, 0_I);

   EXPECT_EQ("23" * 483486_I, 11120178_I);
   EXPECT_EQ("-23" * 483486_I, -11120178_I);
   EXPECT_EQ("23" * -483486_I, -11120178_I);
   EXPECT_EQ("-23" * -483486_I, 11120178_I);

   EXPECT_EQ("1000000000000000" * 2147483647_I, 2147483647000000000000000_I);
   EXPECT_EQ("-1000000000000000" * 2147483647_I, -2147483647000000000000000_I);
   EXPECT_EQ("1000000000000000" * -2147483647_I, -2147483647000000000000000_I);
   EXPECT_EQ("-1000000000000000" * -2147483647_I, 2147483647000000000000000_I);

   EXPECT_EQ("9999999999999999" * 45671926166590716193865151022383844364247891967_I,
            456719261665907116266725343633122249777327897286155635752108033_I);
   EXPECT_EQ("-9999999999999999" * 45671926166590716193865151022383844364247891967_I,
               -456719261665907116266725343633122249777327897286155635752108033_I);
   EXPECT_EQ("9999999999999999" * -45671926166590716193865151022383844364247891967_I,
              -456719261665907116266725343633122249777327897286155635752108033_I);
   EXPECT_EQ("-9999999999999999" * -45671926166590716193865151022383844364247891967_I,
               456719261665907116266725343633122249777327897286155635752108033_I);
}

TEST(Multiply_assign_operator, long_long_int_right_operand) {
  /*
   * Test multiply and assign operator having long long int at right operand
   */
   Integer n;
   EXPECT_EQ(n *= 0, 0_I);
   EXPECT_EQ(n, 0_I);

   n = 44794316410364_I;
   EXPECT_EQ(n *= 0, 0_I);
   EXPECT_EQ(n, 0_I);

   n = 6657023547456997423457850133655987_I;
   EXPECT_EQ(n *= 100000, 665702354745699742345785013365598700000_I);
   EXPECT_EQ(n, 665702354745699742345785013365598700000_I);

   n = -6657023547456997423457850133655987_I;
   EXPECT_EQ(n *= 100000, -665702354745699742345785013365598700000_I);
   EXPECT_EQ(n, -665702354745699742345785013365598700000_I);

   n = 3947400364497464643466368754346_I;
   EXPECT_EQ(n *= 4294967295, 16953955465787689754106889232325959114070_I);
   EXPECT_EQ(n, 16953955465787689754106889232325959114070_I);

   n = -3947400364497464643466368754346_I;
   EXPECT_EQ(n *= 4294967295, -16953955465787689754106889232325959114070_I);
   EXPECT_EQ(n, -16953955465787689754106889232325959114070_I);

   n = 6657023547456997423457850133655987_I;
   EXPECT_EQ(n *= -100000, -665702354745699742345785013365598700000_I);
   EXPECT_EQ(n, -665702354745699742345785013365598700000_I);

   n = -6657023547456997423457850133655987_I;
   EXPECT_EQ(n *= -100000, 665702354745699742345785013365598700000_I);
   EXPECT_EQ(n, 665702354745699742345785013365598700000_I);

   n = 3947400364497464643466368754346_I;
   EXPECT_EQ(n *= -4294967295, -16953955465787689754106889232325959114070_I);
   EXPECT_EQ(n, -16953955465787689754106889232325959114070_I);

   n = -3947400364497464643466368754346_I;
   EXPECT_EQ(n *= -4294967295, 16953955465787689754106889232325959114070_I);
   EXPECT_EQ(n, 16953955465787689754106889232325959114070_I);
}

TEST(Multiply_assign_operator, string_right_operand) {
  /*
   * Test multiply and assign operator having string at right operand
   */
   Integer n;
   EXPECT_EQ(n *= "0", 0_I);
   EXPECT_EQ(n, 0_I);

   n = 44794316410364_I;
   EXPECT_EQ(n *= "0", 0_I);
   EXPECT_EQ(n, 0_I);

   n = 8320364711369971365482016988744123_I;
   EXPECT_EQ(n *= "1000000000", 8320364711369971365482016988744123000000000_I);
   EXPECT_EQ(n, 8320364711369971365482016988744123000000000_I);

   n = -8320364711369971365482016988744123_I;
   EXPECT_EQ(n *= "1000000000", -8320364711369971365482016988744123000000000_I);
   EXPECT_EQ(n, -8320364711369971365482016988744123000000000_I);

   n = 971336548921033654796211569874369722447821_I;
   EXPECT_EQ(n *= "1987456325800788952131",
          1930488968634615839939613629674639005655691346270888886914256551_I);
   EXPECT_EQ(n, 1930488968634615839939613629674639005655691346270888886914256551_I);

   n = -971336548921033654796211569874369722447821_I;
   EXPECT_EQ(n *= "1987456325800788952131",
           -1930488968634615839939613629674639005655691346270888886914256551_I);
   EXPECT_EQ(n, -1930488968634615839939613629674639005655691346270888886914256551_I);

   n = 8320364711369971365482016988744123_I;
   EXPECT_EQ(n *= "-1000000000", -8320364711369971365482016988744123000000000_I);
   EXPECT_EQ(n, -8320364711369971365482016988744123000000000_I);

   n = -8320364711369971365482016988744123_I;
   EXPECT_EQ(n *= "-1000000000", 8320364711369971365482016988744123000000000_I);
   EXPECT_EQ(n, 8320364711369971365482016988744123000000000_I);

   n = 971336548921033654796211569874369722447821_I;
   EXPECT_EQ(n *= "-1987456325800788952131",
          -1930488968634615839939613629674639005655691346270888886914256551_I);
   EXPECT_EQ(n, -1930488968634615839939613629674639005655691346270888886914256551_I);

   n = -971336548921033654796211569874369722447821_I;
   EXPECT_EQ(n *= "-1987456325800788952131",
           1930488968634615839939613629674639005655691346270888886914256551_I);
   EXPECT_EQ(n, 1930488968634615839939613629674639005655691346270888886914256551_I);
}

TEST(Add_Multiply_operator, random_values) {
  /*
   * Test both add and multiply operator. Let a,b,c single int values and
   * d a big integer value, then on a + b = c then a*d + b*d = c*d
   */
   std::default_random_engine int_gen(6105);
   Integer::set_random_engine(int_gen);

   long a, b, c;
   Integer d;

   for (size_t test = 0; test < 10000; test++) {
     a = int_gen() % (std::numeric_limits<long>::max() / 2);
     b = int_gen() % (std::numeric_limits<long>::max() / 2);
     c = a + b;

     d.set_random_value();
     EXPECT_EQ(d*a + d*b, d*c) << "Values a=" << a << ", b=" << b << ", c=" << c << ", d=" << d <<std::endl;
   }
}

///////// DIVISION & MODULO OPERATOR /////////

TEST(Divide_operator, zero_division) {
  /*
   * Test exception is launched when zero division
  */
  EXPECT_THROW(2000_I / 0_I, Integer::zero_division_error);
  EXPECT_THROW(-2000_I / 0_I, Integer::zero_division_error);
  EXPECT_THROW(0_I / 0_I, Integer::zero_division_error);
  EXPECT_THROW(79228162514264337593543950336_I / 0_I, Integer::zero_division_error);
  EXPECT_THROW(-79228162514264337593543950336_I / 0_I, Integer::zero_division_error);

  EXPECT_THROW(2000_I % 0_I, Integer::zero_division_error);
  EXPECT_THROW(-2000_I % 0_I, Integer::zero_division_error);
  EXPECT_THROW(0_I % 0_I, Integer::zero_division_error);
  EXPECT_THROW(79228162514264337593543950336_I % 0_I, Integer::zero_division_error);
  EXPECT_THROW(-79228162514264337593543950336_I % 0_I, Integer::zero_division_error);
}

TEST(Divide_operator, one_division) {
  /*
   * Test division by one
  */
  std::default_random_engine int_gen(1056);
  Integer::set_random_engine(int_gen);
  Integer random;

  for (size_t i = 0; i < 5000; i++) {
    random.set_random_value();
    EXPECT_EQ(random / 1_I, random);
    EXPECT_EQ((-random) / 1_I, -random);
    EXPECT_EQ(random / -1_I, -random);
    EXPECT_EQ((-random) / -1_I, random);

    EXPECT_EQ(random % 1_I, 0);
    EXPECT_EQ((-random) % 1_I, 0);
    EXPECT_EQ(random % -1_I, 0);
    EXPECT_EQ((-random) % -1_I, 0);
  }
}

TEST(Divide_operator, known_cases) {
  /*
   * Test division and module operations for known cases
  */
  EXPECT_EQ(79228162514264337593543950136_I / 4294967146_I, 18446744717954668516_I);
  EXPECT_EQ(79228162514264337593543950136_I % 4294967146_I, 3374800_I);
  EXPECT_EQ(-79228162514264337593543950136_I / 4294967146_I, -18446744717954668516_I);
  EXPECT_EQ(-79228162514264337593543950136_I % 4294967146_I, -3374800_I);
  EXPECT_EQ(79228162514264337593543950136_I / -4294967146_I, -18446744717954668516_I);
  EXPECT_EQ(79228162514264337593543950136_I % -4294967146_I, 3374800_I);
  EXPECT_EQ(-79228162514264337593543950136_I / -4294967146_I, 18446744717954668516_I);
  EXPECT_EQ(-79228162514264337593543950136_I % -4294967146_I, -3374800_I);

  EXPECT_EQ(4294967146_I / 79228162514264337593543950136_I, 0_I);
  EXPECT_EQ(4294967146_I % 79228162514264337593543950136_I, 4294967146_I);
  EXPECT_EQ(-4294967146_I / 79228162514264337593543950136_I, 0_I);
  EXPECT_EQ(-4294967146_I % 79228162514264337593543950136_I, -4294967146_I);
  EXPECT_EQ(4294967146_I / -79228162514264337593543950136_I, 0_I);
  EXPECT_EQ(4294967146_I % -79228162514264337593543950136_I, 4294967146_I);
  EXPECT_EQ(-4294967146_I / -79228162514264337593543950136_I, 0_I);
  EXPECT_EQ(-4294967146_I % -79228162514264337593543950136_I, -4294967146_I);

  EXPECT_EQ(340282366920938463463374607431768211306_I / 170141183460469231731687303715884105708_I, 1_I);
  EXPECT_EQ(340282366920938463463374607431768211306_I % 170141183460469231731687303715884105708_I, 170141183460469231731687303715884105598_I);
  EXPECT_EQ(-340282366920938463463374607431768211306_I / 170141183460469231731687303715884105708_I, -1_I);
  EXPECT_EQ(-340282366920938463463374607431768211306_I % 170141183460469231731687303715884105708_I, -170141183460469231731687303715884105598_I);
  EXPECT_EQ(340282366920938463463374607431768211306_I / -170141183460469231731687303715884105708_I, -1_I);
  EXPECT_EQ(340282366920938463463374607431768211306_I % -170141183460469231731687303715884105708_I, 170141183460469231731687303715884105598_I);
  EXPECT_EQ(-340282366920938463463374607431768211306_I / -170141183460469231731687303715884105708_I, 1_I);
  EXPECT_EQ(-340282366920938463463374607431768211306_I % -170141183460469231731687303715884105708_I, -170141183460469231731687303715884105598_I);

  EXPECT_EQ(170141183460469231731687303715884105708_I / 340282366920938463463374607431768211306_I, 0_I);
  EXPECT_EQ(170141183460469231731687303715884105708_I % 340282366920938463463374607431768211306_I, 170141183460469231731687303715884105708_I);
  EXPECT_EQ(-170141183460469231731687303715884105708_I / 340282366920938463463374607431768211306_I, 0_I);
  EXPECT_EQ(-170141183460469231731687303715884105708_I % 340282366920938463463374607431768211306_I, -170141183460469231731687303715884105708_I);
  EXPECT_EQ(170141183460469231731687303715884105708_I / -340282366920938463463374607431768211306_I, 0_I);
  EXPECT_EQ(170141183460469231731687303715884105708_I % -340282366920938463463374607431768211306_I, 170141183460469231731687303715884105708_I);
  EXPECT_EQ(-170141183460469231731687303715884105708_I / -340282366920938463463374607431768211306_I, 0_I);
  EXPECT_EQ(-170141183460469231731687303715884105708_I % -340282366920938463463374607431768211306_I, -170141183460469231731687303715884105708_I);

  EXPECT_EQ(2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I / 9223372036854770808_I, 231584178474632516389176677751059148895712621214195613194929534170807717199882_I);
  EXPECT_EQ(2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I % 9223372036854770808_I, 7766279631452283920_I);
  EXPECT_EQ(-2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I / 9223372036854770808_I, -231584178474632516389176677751059148895712621214195613194929534170807717199882_I);
  EXPECT_EQ(-2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I % 9223372036854770808_I, -7766279631452283920_I);
  EXPECT_EQ(2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I / -9223372036854770808_I, -231584178474632516389176677751059148895712621214195613194929534170807717199882_I);
  EXPECT_EQ(2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I % -9223372036854770808_I, 7766279631452283920_I);
  EXPECT_EQ(-2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I / -9223372036854770808_I, 231584178474632516389176677751059148895712621214195613194929534170807717199882_I);
  EXPECT_EQ(-2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I % -9223372036854770808_I, -7766279631452283920_I);

  EXPECT_EQ(9223372036854770808_I / 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, 0_I);
  EXPECT_EQ(9223372036854770808_I % 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, 9223372036854770808_I);
  EXPECT_EQ(-9223372036854770808_I / 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, 0_I);
  EXPECT_EQ(-9223372036854770808_I % 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, -9223372036854770808_I);
  EXPECT_EQ(9223372036854770808_I / -2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, 0_I);
  EXPECT_EQ(9223372036854770808_I % -2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, 9223372036854770808_I);
  EXPECT_EQ(-9223372036854770808_I / -2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, 0_I);
  EXPECT_EQ(-9223372036854770808_I % -2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086928576_I, -9223372036854770808_I);
}

TEST(Divide_operator, factorial_inverse) {
  /*
   * Test divide operator for inverse factorial computation
   */

   std::list<Integer> base = {30_I, 40_I, 100_I, 400_I};
   std::list<Integer> result = {265252859812191058636308480000000_I,
                                815915283247897734345611269596115894272000000000_I,
                                93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000_I,
                                64034522846623895262347970319503005850702583026002959458684445942802397169186831436278478647463264676294350575035856810848298162883517435228961988646802997937341654150838162426461942352307046244325015114448670890662773914918117331955996440709549671345290477020322434911210797593280795101545372667251627877890009349763765710326350331533965349868386831339352024373788157786791506311858702618270169819740062983025308591298346162272304558339520759611505302236086810433297255194852674432232438669948422404232599805551610635942376961399231917134063858996537970147827206606320217379472010321356624613809077942304597360699567595836096158715129913822286578579549361617654480453222007825818400848436415591229454275384803558374518022675900061399560145595206127211192918105032491008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000_I
                              };

   // Repeat test per each factorial
   std::list<Integer>::iterator bt, rt;
   bt = base.begin();
   rt = result.begin();

   for(; bt != base.end(); bt++, rt++) {
     Integer fact_inv(*rt);

     for (Integer i = *bt; i > 1_I; i--) {
       fact_inv /= i;
     }

     EXPECT_EQ(fact_inv, 1_I);
   }

}

TEST(Divide_operator, long_long_int_right_operand) {
  /*
   * Test divide and modulo operator having long long int type at right operand
   */
   EXPECT_EQ(0_I / 46797464, 0_I);
   EXPECT_EQ(0_I / -46797464, 0_I);
   EXPECT_EQ(-0_I / 46797464, 0_I);
   EXPECT_EQ(-0_I / -46797464, 0_I);

   EXPECT_EQ(0_I % 46797464, 0_I);
   EXPECT_EQ(0_I % -46797464, 0_I);
   EXPECT_EQ(-0_I % 46797464, 0_I);
   EXPECT_EQ(-0_I % -46797464, 0_I);

   EXPECT_EQ(678913_I / 450, 1508_I);
   EXPECT_EQ(678913_I / -450, -1508_I);
   EXPECT_EQ(-678913_I / 450, -1508_I);
   EXPECT_EQ(-678913_I / -450, 1508_I);

   EXPECT_EQ(678913_I % 450, 313_I);
   EXPECT_EQ(678913_I % -450, 313_I);
   EXPECT_EQ(-678913_I % 450, -313_I);
   EXPECT_EQ(-678913_I % -450, -313_I);

   EXPECT_EQ(4294967295_I / 222222, 19327_I);
   EXPECT_EQ(4294967295_I / -222222, -19327_I);
   EXPECT_EQ(-4294967295_I / 222222, -19327_I);
   EXPECT_EQ(-4294967295_I / -222222, 19327_I);

   EXPECT_EQ(4294967295_I % 222222, 82701);
   EXPECT_EQ(4294967295_I % -222222, 82701);
   EXPECT_EQ(-4294967295_I % 222222, -82701);
   EXPECT_EQ(-4294967295_I % -222222, -82701);

   EXPECT_EQ(9903520314283042199192993792_I / 6387941, 1550346240562184622430_I);
   EXPECT_EQ(9903520314283042199192993792_I / -6387941, -1550346240562184622430_I);
   EXPECT_EQ(-9903520314283042199192993792_I / 6387941, -1550346240562184622430_I);
   EXPECT_EQ(-9903520314283042199192993792_I / -6387941, 1550346240562184622430_I);

   EXPECT_EQ(9903520314283042199192993792_I % 6387941, 2877162_I);
   EXPECT_EQ(9903520314283042199192993792_I % -6387941, 2877162_I);
   EXPECT_EQ(-9903520314283042199192993792_I % 6387941, -2877162_I);
   EXPECT_EQ(-9903520314283042199192993792_I % -6387941, -2877162_I);
}

TEST(Divide_operator, string_right_operand) {
  /*
   * Test divide and modulo operator having string type at right operand
   */
   EXPECT_EQ(0_I / "46797464", 0_I);
   EXPECT_EQ(0_I / "-46797464", 0_I);
   EXPECT_EQ(-0_I / "46797464", 0_I);
   EXPECT_EQ(-0_I / "-46797464", 0_I);

   EXPECT_EQ(0_I % "46797464", 0_I);
   EXPECT_EQ(0_I % "-46797464", 0_I);
   EXPECT_EQ(-0_I % "46797464", 0_I);
   EXPECT_EQ(-0_I % "-46797464", 0_I);

   EXPECT_EQ(678913_I / "450", 1508_I);
   EXPECT_EQ(678913_I / "-450", -1508_I);
   EXPECT_EQ(-678913_I / "450", -1508_I);
   EXPECT_EQ(-678913_I / "-450", 1508_I);

   EXPECT_EQ(678913_I % "450", 313_I);
   EXPECT_EQ(678913_I % "-450", 313_I);
   EXPECT_EQ(-678913_I % "450", -313_I);
   EXPECT_EQ(-678913_I % "-450", -313_I);

   EXPECT_EQ(239713_I / "1515698753155435113", 0_I);
   EXPECT_EQ(239713_I / "-1515698753155435113", 0_I);
   EXPECT_EQ(-239713_I / "1515698753155435113", 0_I);
   EXPECT_EQ(-239713_I / "-1515698753155435113", 0_I);

   EXPECT_EQ(239713_I % "1515698753155435113", 239713_I);
   EXPECT_EQ(239713_I % "-1515698753155435113", 239713_I);
   EXPECT_EQ(-239713_I % "1515698753155435113", -239713_I);
   EXPECT_EQ(-239713_I % "-1515698753155435113", -239713_I);

   EXPECT_EQ(497846413646476464674431713_I / "164543445546454444", 3025622880_I);
   EXPECT_EQ(497846413646476464674431713_I / "-164543445546454444", -3025622880_I);
   EXPECT_EQ(-497846413646476464674431713_I / "164543445546454444", -3025622880_I);
   EXPECT_EQ(-497846413646476464674431713_I / "-164543445546454444", 3025622880_I);

   EXPECT_EQ(497846413646476464674431713_I % "164543445546454444", 47089796030352993_I);
   EXPECT_EQ(497846413646476464674431713_I % "-164543445546454444", 47089796030352993_I);
   EXPECT_EQ(-497846413646476464674431713_I % "164543445546454444", -47089796030352993_I);
   EXPECT_EQ(-497846413646476464674431713_I % "-164543445546454444", -47089796030352993_I);
}

TEST(Divide_operator, long_long_int_left_operand) {
  /*
   * Test divide and modulo operator having long long int type at left operand
   */
   EXPECT_EQ(0 / 1879_I, 0_I);
   EXPECT_EQ(0 / -1879_I, 0_I);
   EXPECT_EQ(-0 / 1879_I, 0_I);
   EXPECT_EQ(-0 / -1879_I, 0_I);

   EXPECT_EQ(0 % 1879_I, 0_I);
   EXPECT_EQ(0 % -1879_I, 0_I);
   EXPECT_EQ(-0 % 1879_I, 0_I);
   EXPECT_EQ(-0 % -1879_I, 0_I);

   EXPECT_EQ(45368473 / 990_I, 45826_I);
   EXPECT_EQ(45368473 / -990_I, -45826_I);
   EXPECT_EQ(-45368473 / 990_I, -45826_I);
   EXPECT_EQ(-45368473 / -990_I, 45826_I);

   EXPECT_EQ(45368473 % 990_I, 733_I);
   EXPECT_EQ(-45368473 % 990_I, -733_I);
   EXPECT_EQ(45368473 % -990_I, 733_I);
   EXPECT_EQ(-45368473 % -990_I, -733_I);

   EXPECT_EQ(4294966295 / 4000000000_I, 1_I);
   EXPECT_EQ(-4294966295 / 4000000000_I, -1_I);
   EXPECT_EQ(4294966295 / -4000000000_I, -1_I);
   EXPECT_EQ(-4294966295 / -4000000000_I, 1_I);

   EXPECT_EQ(4294966295 % 4000000000_I, 294966295_I);
   EXPECT_EQ(-4294966295 % 4000000000_I, -294966295_I);
   EXPECT_EQ(4294966295 % -4000000000_I, 294966295_I);
   EXPECT_EQ(-4294966295 % -4000000000_I, -294966295_I);
}

TEST(Divide_operator, string_left_operand) {
  /*
   * Test divide and modulo operator having string type at left operand
   */
   EXPECT_EQ("0" / 7913_I, 0_I);
   EXPECT_EQ("-0" / 7913_I, 0_I);
   EXPECT_EQ("0" / -7913_I, 0_I);
   EXPECT_EQ("-0" / -7913_I, 0_I);

   EXPECT_EQ("0" % 7913_I, 0_I);
   EXPECT_EQ("-0" % 7913_I, 0_I);
   EXPECT_EQ("0" % -7913_I, 0_I);
   EXPECT_EQ("-0" % -7913_I, 0_I);

   EXPECT_EQ("1971646" / 709879_I, 2_I);
   EXPECT_EQ("-1971646" / 709879_I, -2_I);
   EXPECT_EQ("1971646" / -709879_I, -2_I);
   EXPECT_EQ("-1971646" / -709879_I, 2_I);

   EXPECT_EQ("1971646" % 709879_I, 551888_I);
   EXPECT_EQ("-1971646" % 709879_I, -551888_I);
   EXPECT_EQ("1971646" % -709879_I, 551888_I);
   EXPECT_EQ("-1971646" % -709879_I, -551888_I);

   EXPECT_EQ("45979781334687947851134" / 69787913511013879_I, 658850_I);
   EXPECT_EQ("-45979781334687947851134" / 69787913511013879_I, -658850_I);
   EXPECT_EQ("45979781334687947851134" / -69787913511013879_I, -658850_I);
   EXPECT_EQ("-45979781334687947851134" / -69787913511013879_I, 658850_I);

   EXPECT_EQ("45979781334687947851134" % 69787913511013879_I, 14517956453671984_I);
   EXPECT_EQ("-45979781334687947851134" % 69787913511013879_I, -14517956453671984_I);
   EXPECT_EQ("45979781334687947851134" % -69787913511013879_I, 14517956453671984_I);
   EXPECT_EQ("-45979781334687947851134" % -69787913511013879_I, -14517956453671984_I);
}

TEST(Divide_assign_operator, long_long_int_right_operand) {
  /*
   * Test divide operator having long long int type at right operand
   */
   Integer n;
   EXPECT_EQ(n /= 8794, 0_I);
   EXPECT_EQ(n, 0_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n /= 4294967295, 109363641799073692372_I);
   EXPECT_EQ(n, 109363641799073692372_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n /= 4294967295, -109363641799073692372_I);
   EXPECT_EQ(n, -109363641799073692372_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n /= -4294967295, -109363641799073692372_I);
   EXPECT_EQ(n, -109363641799073692372_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n /= -4294967295, 109363641799073692372_I);
   EXPECT_EQ(n, 109363641799073692372_I);
}

TEST(Divide_assign_operator, string_right_operand) {
  /*
   * Test divide operator having string type at right operand
   */
   Integer n;
   EXPECT_EQ(n /= "8794", 0_I);
   EXPECT_EQ(n, 0_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n /= "4294967295000", 109363641799073692_I);
   EXPECT_EQ(n, 109363641799073692_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n /= "4294967295000", -109363641799073692_I);
   EXPECT_EQ(n, -109363641799073692_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n /= "-4294967295000", -109363641799073692_I);
   EXPECT_EQ(n, -109363641799073692_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n /= "-4294967295000", 109363641799073692_I);
   EXPECT_EQ(n, 109363641799073692_I);
}

TEST(Modulus_assign_operator, long_long_int_right_operand) {
  /*
   * Test modulus operator having long long int type at right operand
   */
   Integer n;
   EXPECT_EQ(n %= 8794, 0_I);
   EXPECT_EQ(n, 0_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n %= 4294967295, 3836729907_I);
   EXPECT_EQ(n, 3836729907_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n %= -4294967295, 3836729907_I);
   EXPECT_EQ(n, 3836729907_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n %= 4294967295, -3836729907_I);
   EXPECT_EQ(n, -3836729907_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n %= -4294967295, -3836729907_I);
   EXPECT_EQ(n, -3836729907_I);
}

TEST(Modulus_assign_operator, string_right_operand) {
  /*
   * Test divide operator having string type at right operand
   */
   Integer n;
   EXPECT_EQ(n %= "8794", 0_I);
   EXPECT_EQ(n, 0_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n %= "4294967295000", 1601564563647_I);
   EXPECT_EQ(n, 1601564563647_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n %= "4294967295000", -1601564563647_I);
   EXPECT_EQ(n, -1601564563647_I);

   n = 469713264789116470036467703647_I;
   EXPECT_EQ(n %= "-4294967295000", 1601564563647_I);
   EXPECT_EQ(n, 1601564563647_I);

   n = -469713264789116470036467703647_I;
   EXPECT_EQ(n %= "-4294967295000", -1601564563647_I);
   EXPECT_EQ(n, -1601564563647_I);
}

//////////// Power operation ////////////

TEST(Power_operator, zero_base) {
  /*
   * Test on b !=0, 0^b = 0 for any positive value given for b,
  */
  std::default_random_engine int_gen(1506);
  Integer::set_random_engine(int_gen);

  for (size_t i = 0; i < 5000; i++) {
    EXPECT_EQ((0_I).pow(Integer::rand() + 1_I), 0);
  }

}

TEST(Power_operator, zero_base_zero_exp) {
  /*
   * Test on b = 1, it will be supposed 0^b = 1
  */
  EXPECT_EQ((0_I).pow(0_I), 1_I);
}

TEST(Power_operator, one_exp) {
  /*
   * Test 1^b = 1 for any positive value given for b
  */
  std::default_random_engine int_gen(1650);
  Integer::set_random_engine(int_gen);

  for (size_t i = 0; i < 5000; i++) {
    EXPECT_EQ((1_I).pow(Integer::rand()), 1_I);
  }

}

TEST(Power_operator, test_exception) {
  /*
   * Test exception is raised on exp negative
  */
  EXPECT_THROW((0_I).pow(-1_I), std::invalid_argument);
  EXPECT_THROW((1_I).pow(-10_I), std::invalid_argument);
  EXPECT_THROW((-1_I).pow(-648781336_I), std::invalid_argument);
  EXPECT_THROW((8589934592_I).pow(-8589934593_I), std::invalid_argument);
  EXPECT_THROW((18436997725035420552_I).pow(-100000000000000000_I), std::invalid_argument);
  EXPECT_THROW((4679467203899414867613_I).pow(-3544861398970319796831_I), std::invalid_argument);
}

TEST(Power_operator, known_cases) {
  /*
   * Test power operation for several known cases
   */
   EXPECT_EQ((2_I).pow(10_I), 1024_I);
   EXPECT_EQ((-2_I).pow(10_I), 1024_I);

   EXPECT_EQ((3_I).pow(11_I), 177147_I);
   EXPECT_EQ((-3_I).pow(11_I), -177147_I);

   EXPECT_EQ((178_I).pow(250_I),
      40271756957952795632608040503025615608855420621889009960899226564756279220442625583861960615801062242427625597872058235968256423613486689374225961610772145641627407332471925514335175153198396303624989621056540355995444686015072458295565770952595481118933952602880929787497574786099220171866972472089457325467825624208211557996459683817899019989367132146591180730911081977016314206982396908464909339811885989492201387506239622442536146950495202316491258619204586282024500661611982889368347131187424439038776026242632448897142696027550712717977444772437148118810624_I);
   EXPECT_EQ((-178_I).pow(251_I),
            -7168372738515597622604231209538559578376264870696243773040062328526617701238787353927428989612589079152117356421226366002349643403200630708612221166717441924209678505180002741551661177269314542045248152548064183367189154110682897576610707229561995639170243563312805502174568311925661190592321100031923403933272961109061657323369823719586025558107349522093230170102172591908903928842866649706753862486515706129611846976110652794771434157188146012335444034218416358200361117766932954307565789351361550148902132671188575903691399892904026863799985169493812365148291072_I);
   EXPECT_EQ((10_I).pow
   EXPECT_EQ((-10_I).pow

   EXPECT_EQ((36893488147419103232_I).pow(11_I), 172364133221937103085272756482216056112753534658909761028039668631756215232006744379020625060744018369805777923479247838020220755974022884986972234404720831691332769255536872593544438018353486799545737272878084128768_I);
   EXPECT_EQ((-36893488147419103232_I).pow(11_I), -172364133221937103085272756482216056112753534658909761028039668631756215232006744379020625060744018369805777923479247838020220755974022884986972234404720831691332769255536872593544438018353486799545737272878084128768_I);
}

TEST(Power_operator, long_long_int_right_operand) {
  /*
   * Test power operator having long long int type as exponent
   */
   EXPECT_EQ((1000_I).pow(3), 1000000000_I);
   EXPECT_EQ((-1000_I).pow(3), -1000000000_I);

   EXPECT_EQ((500_I).pow(100),
              788860905221011805411728565282786229673206435109023004770278930664062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000_I);
   EXPECT_EQ((-500_I).pow(100),
             788860905221011805411728565282786229673206435109023004770278930664062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000_I);
}

TEST(Power_operator, string_right_operand) {
  /*
   * Test power operator having string type as exponent
   */
   EXPECT_EQ((100000_I).pow("20"),
      10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000_I);
   EXPECT_EQ((-100000_I).pow("20"),
       10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000_I);

   EXPECT_EQ((7971_I).pow("200"),
    2007066794903987735712530422066827893429112595408742999079340652687819470957458447967655258641959403806589780369573691704347312203191133339365960951661843522209408640504669845455165346486865996223427967756581483057245991305826804142124110828963114711130880755350914315404323566437431534285443780134773141095744390708684379304491226620216814536293058000522144861958089164630852254898047531874709139051356450930984598649931798223766941251804875550927481090246088162734055828516394127127222671635439142282406624158518175559577125880384373107039713870606744081823640347256251249132242243358480716581224440986170050978940153011216961751509426660591202681636977743642498999369914737017679004413565940950540213634336558363002984198973189487435440519638352534732540489301153033805283204001_I);
    EXPECT_EQ((-7971_I).pow("200"),
     2007066794903987735712530422066827893429112595408742999079340652687819470957458447967655258641959403806589780369573691704347312203191133339365960951661843522209408640504669845455165346486865996223427967756581483057245991305826804142124110828963114711130880755350914315404323566437431534285443780134773141095744390708684379304491226620216814536293058000522144861958089164630852254898047531874709139051356450930984598649931798223766941251804875550927481090246088162734055828516394127127222671635439142282406624158518175559577125880384373107039713870606744081823640347256251249132242243358480716581224440986170050978940153011216961751509426660591202681636977743642498999369914737017679004413565940950540213634336558363002984198973189487435440519638352534732540489301153033805283204001_I);
}
